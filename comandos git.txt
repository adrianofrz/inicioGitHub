git config --global user.name "seu nome aqui" --configura o nome do usu�rio do git local
git config --global user.email "seu email aqui" --configura o email do usu�rio do git local
git config --global core.editor "seu editor aqui" --configura o editor do usu�rio do git local
/**************************/
git init   -- inicializa um reposit�rio e fica enxergando as mudan�as dentro do projeto
git status -- mostra os status dos arquivos que fazem parte daquele reposit�rio (untracked, unmodifed, modified e staged)
git add    -- adiciona um arquivo novo ao reposit�rio local ou aplica as modifica��es realizadas no arquivo para que ele fique no estado de stage, logo ao realizar um commit esse arquivo ser� levado junto na cria��o da vers�o.
git commit -m "sua mensagem aqui" ou -am "sua mensagem aqui" (Esse aqui commita arquivos que j� foram adicionados anteriormente ao reposit�rio)-- pega todos os arquivos em modo stage (prontos para commit) e cria uma vers�o dele, um snapshot.
git log --visualiza as modifica��es realiazdas no reposit�rio (parametros para o git log: shortlog mostra os arquivos que um determinado autor alterou e commitou
log --author="nome do cabrunco aqui": filtra os commits desse usu�rio
log --decorate: mostra de onde veio o arquivo e para qual branch ele foi
log --graph: mostra de forma gr�fica o que foi realizado)
git show <hash do commit aqui> : mostra o que foi alterado no determinado arquivo
git diff -- mostra a diferen�a dos arquivos atuais com os �ltimos commits deles
git checkout "seu arquivo aqui" -- comando que desfaz uma modifica��o antes de ser adicionada
git reset HEAD "comandos git.txt" -- remove o arquivo do status stage, ou seja, pronto para ser commitado
git reset --soft ou --mixed ou --hard <hash do commit aqui>: Esses comando escolhem o commit que v�o olhar, logo tudo o que foi feito depois deles, ser�o feitas as seguintes modifica��es 
--soft: apaga o commit realizado no reposit�rio, volta os mesmos para o estado de stage para serem commitados de novo
--mixed: apaga o commit realizado no reposit�rio, volta os mesmos para o estado de modificado para serem adicionados de novo
--hard: apaga o commit realizado no reposit�rio e as modifica��es do arquivo
/*********************************/
git remote add origin git@github.com:sua autenticação ssh aqui --liga o acesso ao repositório na nuvem
git push -u origin master -- publica os commits na nuvem passando o repositorio que eu vou enviar e do brench que estamos (o segundo parametro)
git clone "endereço ssh aqui ou https" "nome do diretorio que será clonado"